plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
}

group 'ASE'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ASE.Application')
}

dependencies {
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.122'


    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'mysql:mysql-connector-java:8.0.27'
    runtimeOnly 'com.h2database:h2'


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonarqube {
    properties {
        property "sonar.projectKey", "FS23-ASE_ASE-server"
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
    jacoco {
        // JaCoCo 配置，例如：
        // 是否包括无源代码的类，默认为 false
        includeNoLocationClasses = true
    }
}

jacoco {
    toolVersion = "0.8.7" // 可选，指定 JaCoCo 版本
}


jacocoTestReport {
    reports {
        xml.enabled = true // 生成 XML 报告
        html.enabled = true // 生成 HTML 报告
    }
}


File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}

defaultTasks 'bootJar', 'build'
